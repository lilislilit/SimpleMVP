/*
 * Copyright (c) 2019 Pavel A. Sokolov
 */

package com.simplemvp.common;

import android.content.Intent;
import android.support.annotation.IdRes;
import android.support.annotation.NonNull;
import android.view.DragEvent;

/**
 * This interface describes generic MVP presenter
 *
 * @param <S> state type
 */
public interface MvpPresenter<S extends MvpState> {
    /**
     * This method is called by any {@link MvpView MvpView} implementation to connect with presenter
     * instance. Typically this method is called internally.
     *
     * @param view view
     */
    void attach(MvpView<S, ?> view);

    /**
     * This method is called when {@link MvpView MvpView} is closed e.g. presenter is no more needed.
     * Typically it is called internally.
     *
     * @param view
     */
    void detach(MvpView<S, ?> view);

    /**
     * Method to be used by {@link com.simplemvp.presenter.MvpPresenterManager MvpPresenterManager}
     * to release presenter instance if one has no attached views.
     *
     * @return true if there is no {@link MvpView MvpView} attached to current presenter
     */
    boolean isDetached();

    /**
     * This method return presenter ID. Presenter ID is just a number that sequently generated by the
     * library.
     *
     * @return presenter id
     */
    int getId();

    void commit();

    /**
     * This method terminates presenter and all one's attached views
     */
    void finish();

    /**
     * This method has the same purpose as the {@link android.app.Activity#onActivityResult(int, int, Intent)}
     *
     * @param requestCode The integer request code originally supplied to startActivityForResult(),
     *                    allowing you to identify who this result came from.
     * @param resultCode  The integer result code returned by the child activity through its setResult().
     * @param data        An Intent, which can return result data to the caller (various data can be attached
     *                    to Intent "extras").
     */
    void onActivityResult(int requestCode, int resultCode, Intent data);

    /**
     * This method has the same purpose as the {@link android.app.Activity#onRequestPermissionsResult(int, String[], int[])}
     *
     * @param requestCode  The request code passed in {@link #requestPermissions(String[], int)}.
     * @param permissions  The requested permissions. Never null.
     * @param grantResults The grant results for the corresponding permissions
     *                     which is either {@link android.content.pm.PackageManager#PERMISSION_GRANTED}
     *                     or {@link android.content.pm.PackageManager#PERMISSION_DENIED}. Never null.
     */
    void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults);

    void onViewClicked(@IdRes int viewId);

    void onOptionsItemSelected(@IdRes int itemId);

    void onItemSelected(@IdRes int viewId, Object item);

    void onCheckedChanged(@IdRes int viewId, boolean isChecked);

    void onRadioCheckedChanged(@IdRes int radioViewId, @IdRes int viewId);

    void onTextChanged(@IdRes int viewId, String text);

    void onDrag(@IdRes int viewId, DragEvent event);
}
